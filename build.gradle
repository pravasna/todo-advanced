apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property "sonar.projectName", "todo"
        property 'sonar.projectDescription', 'A task management application'

        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "sonar-runner"
        property "sonar.password", "runner"

        property "sonar.jdbc.url", "jdbc:mysql://rinf-mysql.ctvsrt9j2ypf.eu-west-1.rds.amazonaws.com:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "Cellini7#F"
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
	apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/jacoco.gradle"

    repositories {
        mavenCentral()
    }

    test {
        def testResultsDir = reports.html.destination
        reports.html.destination = file("$testResultsDir/unit")

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

    sonarRunner {
        sonarProperties {
            property 'sonar.sourceEncoding', 'UTF-8'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

task loadConfiguration {
	def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
	def env = project.hasProperty('env') ? project.getProperty('env') : 'test'
	logger.quiet "Loading configuration for environment '$env'."
	def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())
	
	allprojects {
		ext.config = parsedConfig
	}
}