project(':web') {
    apply plugin: 'war'
    apply plugin: 'jetty'
    apply from: "$rootDir/gradle/deployCargo.gradle"
    apply from: "$rootDir/gradle/functionalTest.gradle"
    apply from: "$rootDir/gradle/loadTest.gradle"

    dependencies {
        compile project(':repository')
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
        runtime 'taglibs:standard:1.1.2'
    }

    task createBuildInfoFile << {
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('timestamp', project.buildTimestamp)
        props.store(buildInfoFile.newWriter(), null)
    }
	
    war {
        dependsOn createBuildInfoFile
        baseName = 'todo'
	
        from(buildDir) {
            include 'build-info.properties'
            into('WEB-INF/classes')
        }
    }
	
    ext.downloadedArtifact = file("$buildDir/download/$war.archiveName") 
	
    task downloadBinaryArchive(type: com.manning.gia.BinaryDownload) {
        ext {
            repoPath = project.group.replaceAll('\\.', '/')
            repoBaseArtifactName = war.baseName
            repoVersion = project.version.toString()
            repoArtifact = war.archiveName
            binaryUrl = "${config.binaryRepository.url}/simple/${config.binaryRepository.name}/${repoPath}/${repoBaseArtifactName}/${repoVersion}/${repoArtifact}"
        }

        sourceUrl = binaryUrl
        targetBinary = downloadedArtifact
    }
	
    cargoDeployRemote.dependsOn downloadBinaryArchive, cargoUndeployRemote
	
    cargo {
        containerId = 'tomcat7x'
        port = config.server.port

        deployable {
            file = downloadedArtifact
            context = config.server.context
        }

        remote {
            hostname = config.server.hostname
            username = config.server.username
            password = config.server.password
        }
    }
	
    ext.loadTestResources = "$projectDir/src/loadTest/resources"
	
    jmeterRun.configure {
        jmeterTestFiles = [file("$loadTestResources/todo-test-plan.jmx")]
        jmeterPropertyFile = file("$loadTestResources/jmeter.properties")
        jmeterUserProperties = ["hostname=${config.server.hostname}", "port=${config.server.port}", "context=${config.server.context}"]
        logging.captureStandardError LogLevel.INFO
    }
}